generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String?
  email           String           @unique
  password        String
  address         String?
  phone           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  googleId        String?          @unique
  profilePicture  String?
  cart            Cart?
  orders          Order[]
  recommendations Recommendation[]
  wishlist        Wishlist?
}

model Product {
  id                 Int                      @id @default(autoincrement())
  name               String
  description        String
  stock              Int                      @default(1)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime?                @updatedAt
  subCategoryId      Int
  actualPrice        Float
  discountPercentage Float?
  offerPrice         Float
  rating             Float?
  brand              String
  categoryId         Int
  cartItems          CartItem[]
  images             Image[]
  orderedItems       OrderedItem[]
  category           Category                 @relation(fields: [categoryId], references: [id])
  subCategory        SubCategory              @relation(fields: [subCategoryId], references: [id])
  recommendation     RecommendationsProduct[]
  wishlistItems      WishlistProduct[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  products      Product[]
  subCategories SubCategory[]
}

model SubCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  products    Product[]
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Wishlist {
  id        Int               @id @default(autoincrement())
  userId    Int               @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])
  products  WishlistProduct[]
}

model WishlistProduct {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  totalAmount Float
  user        User       @relation(fields: [userId], references: [id])
  items       CartItem[]
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int      @default(1)
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Order {
  id            Int           @id @default(autoincrement())
  userId        Int
  totalAmount   Float
  orderDate     DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentId     String? @unique
  orderStatus   String        @default("PENDING")
  paymentStatus OrderStatus   @default(PENDING)
  user          User          @relation(fields: [userId], references: [id])
  items         OrderedItem[]
}

model OrderedItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Recommendation {
  id        Int                      @id @default(autoincrement())
  userId    Int
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  user      User                     @relation(fields: [userId], references: [id])
  products  RecommendationsProduct[]
}

model RecommendationsProduct {
  id               Int            @id @default(autoincrement())
  recommendationId Int
  productId        Int
  product          Product        @relation(fields: [productId], references: [id])
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
